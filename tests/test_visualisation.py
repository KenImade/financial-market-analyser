import unittest
from unittest.mock import patch
import pandas as pd

from src.core.report_generator import ReportGenerator

class TestReportGenerator(unittest.TestCase):

    def setUp(self):
        self.company_info = { # Mock Company data
            "Symbol": "IBM",
            "AssetType": "Common Stock",
            "Name": "International Business Machines",
            "Description": "International Business Machines Corporation (IBM) is an American multinational technology company headquartered in Armonk, New York, with operations in over 170 countries. The company began in 1911, founded in Endicott, New York, as the Computing-Tabulating-Recording Company (CTR) and was renamed International Business Machines in 1924. IBM is incorporated in New York. IBM produces and sells computer hardware, middleware and software, and provides hosting and consulting services in areas ranging from mainframe computers to nanotechnology. IBM is also a major research organization, holding the record for most annual U.S. patents generated by a business (as of 2020) for 28 consecutive years. Inventions by IBM include the automated teller machine (ATM), the floppy disk, the hard disk drive, the magnetic stripe card, the relational database, the SQL programming language, the UPC barcode, and dynamic random-access memory (DRAM). The IBM mainframe, exemplified by the System/360, was the dominant computing platform during the 1960s and 1970s.",
            "CIK": "51143",
            "Exchange": "NYSE",
            "Currency": "USD",
            "Country": "USA",
            "Sector": "TECHNOLOGY",
            "Industry": "COMPUTER & OFFICE EQUIPMENT",
            "Address": "1 NEW ORCHARD ROAD, ARMONK, NY, US",
            "FiscalYearEnd": "December",
            "LatestQuarter": "2023-12-31",
            "MarketCapitalization": "170881090000",
            "EBITDA": "13777000000",
            "PERatio": "22.93",
            "PEGRatio": "4.341",
            "BookValue": "24.63",
            "DividendPerShare": "6.63",
            "DividendYield": "0.0355",
            "EPS": "8.16",
            "RevenuePerShareTTM": "67.89",
            "ProfitMargin": "0.121",
            "OperatingMarginTTM": "0.23",
            "ReturnOnAssetsTTM": "0.0447",
            "ReturnOnEquityTTM": "0.337",
            "RevenueTTM": "61860000000",
            "GrossProfitTTM": "32688000000",
            "DilutedEPSTTM": "8.16",
            "QuarterlyEarningsGrowthYOY": "0.197",
            "QuarterlyRevenueGrowthYOY": "0.041",
            "AnalystTargetPrice": "177.67",
            "TrailingPE": "22.93",
            "ForwardPE": "18.73",
            "PriceToSalesRatioTTM": "2.762",
            "PriceToBookRatio": "7.58",
            "EVToRevenue": "3.514",
            "EVToEBITDA": "14.8",
            "Beta": "0.764",
            "52WeekHigh": "196.9",
            "52WeekLow": "117.38",
            "50DayMovingAverage": "163.12",
            "200DayMovingAverage": "143.89",
            "SharesOutstanding": "913119000",
            "DividendDate": "2023-12-09",
            "ExDividendDate": "2023-11-09"
        }
        self.monthly_data = pd.DataFrame({'date': pd.date_range(start='2020-01-01', periods=12, freq='M'), 'stock_price': range(12)})
        self.weekly_data = pd.DataFrame({'date': pd.date_range(start='2020-01-01', periods=7, freq='W'), 'stock_price': range(7)})
        self.daily_data = pd.DataFrame({'date': pd.date_range(start='2020-01-01', periods=11, freq='D'), 'stock_price': range(11)})

        self.generator = ReportGenerator(self.company_info, self.monthly_data, self.weekly_data, self.daily_data)
    
    def test_preprocessing(self):
        # Test if data is sorted by date after intialization
        for data in [self.generator.monthly_data, self.generator.weekly_data, self.generator.daily_data]:
            self.assertTrue(data['date'].is_monotonic_increasing, "Data should be sorted by date")
    
    @patch('matplotlib.pyplot')
    def test_plot_line(self, mocked_plt):
        # Test plot generation doesn't raise errors
        try:
            self.generator.plot_line(symbol='TEST', time_period='W')
        except Exception as e:
            self.fail(f"plot_line raised an exception {e}")
    
    @patch('os.path.exists', return_value=True)
    def test_generate_pdf_report(self, mocked_exists):
        # Test PDF generation doesn't raise errors
        try:
            self.generator.generate_pdf_report()
            # Optionally, check if file exists or mock `SimpleDocTemplate.build` to verify it's called
        except Exception as e:
            self.fail(f"generate_pdf_report raised an exception {e}")

if __name__ == "__main__":
    unittest.main()